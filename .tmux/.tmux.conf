unbind-key -a

bind-key    -T prefix C-b              send-prefix
bind-key    -T prefix C-o              rotate-window
bind-key    -T prefix C-z              suspend-client
bind-key    -T prefix Space            next-layout
# https://github.com/tmux/tmux/issues/859
# Selects previous layout
# bind-key    -T prefix Space            select-layout -o
bind-key    -T prefix !                break-pane
bind-key    -T prefix '"'                split-window
bind-key    -T prefix '#'                list-buffers
bind-key    -T prefix '$'                command-prompt -I '#'S "rename-session '%%'"
bind-key    -T prefix %                split-window -h
bind-key    -T prefix &                confirm-before -p "kill-window #W? (y/n)" kill-window
bind-key    -T prefix "'"                command-prompt -p index "select-window -t ':%%'"
bind-key    -T prefix (                switch-client -p
bind-key    -T prefix )                switch-client -n
bind-key    -T prefix ,                command-prompt -I '#W' "rename-window '%%'"
bind-key    -T prefix -                delete-buffer
bind-key    -T prefix .                command-prompt "move-window -t '%%'"
bind-key    -T prefix 0                select-window -t :=0
bind-key    -T prefix 1                select-window -t :=1
bind-key    -T prefix 2                select-window -t :=2
bind-key    -T prefix 3                select-window -t :=3
bind-key    -T prefix 4                select-window -t :=4
bind-key    -T prefix 5                select-window -t :=5
bind-key    -T prefix 6                select-window -t :=6
bind-key    -T prefix 7                select-window -t :=7
bind-key    -T prefix 8                select-window -t :=8
bind-key    -T prefix 9                select-window -t :=9
bind-key    -T prefix ':'                command-prompt
bind-key    -T prefix \;                last-pane
bind-key    -T prefix =                choose-buffer
bind-key    -T prefix ?                list-keys
bind-key    -T prefix D                choose-client
bind-key    -T prefix L                switch-client -l
bind-key    -T prefix M                select-pane -M
bind-key    -T prefix [                copy-mode
bind-key    -T prefix ]                paste-buffer
bind-key    -T prefix c                new-window
bind-key    -T prefix d                detach-client
bind-key    -T prefix f                command-prompt "find-window '%%'"
bind-key    -T prefix i                display-message
bind-key    -T prefix l                last-window
bind-key    -T prefix m                select-pane -m
bind-key    -T prefix n                next-window
bind-key    -T prefix o                select-pane -t :.+
bind-key    -T prefix p                previous-window
bind-key    -T prefix q                display-panes
bind-key    -T prefix r                refresh-client
bind-key    -T prefix s                choose-tree
bind-key    -T prefix t                clock-mode
bind-key    -T prefix w                choose-window
bind-key    -T prefix x                confirm-before -p "kill-pane #P? (y/n)" kill-pane
bind-key    -T prefix z                resize-pane -Z
bind-key    -T prefix {                swap-pane -U
bind-key    -T prefix }                swap-pane -D
bind-key    -T prefix '~'                show-messages
bind-key    -T prefix PPage            copy-mode -u
# bind-key -r -T prefix Up               select-pane -U
# bind-key -r -T prefix Down             select-pane -D
# bind-key -r -T prefix Left             select-pane -L
# bind-key -r -T prefix Right            select-pane -R
bind-key    -T prefix M-1              select-layout tiled
# bind-key    -T prefix M-1              select-layout even-horizontal
bind-key    -T prefix M-2              select-layout main-vertical
# bind-key    -T prefix M-2              select-layout even-vertical
bind-key    -T prefix M-3              select-layout main-horizontal
# bind-key    -T prefix M-4              select-layout main-vertical
bind-key    -T prefix M-4              select-layout even-vertical
bind-key    -T prefix M-5              select-layout even-horizontal
# bind-key    -T prefix M-5              select-layout tiled
bind-key    -T prefix M-n              next-window -a
bind-key    -T prefix M-o              rotate-window -D
bind-key    -T prefix M-p              previous-window -a
bind-key -r -T prefix C-Up             resize-pane -U
bind-key -r -T prefix C-Down           resize-pane -D
bind-key -r -T prefix C-Left           resize-pane -L
bind-key -r -T prefix C-Right          resize-pane -R
bind-key    -T root   MouseDown1Pane   select-pane -t = \; send-keys -M
bind-key    -T root   MouseDown1Status select-window -t =
bind-key    -T root   MouseDown3Pane   if-shell -F -t = '#{mouse_any_flag}' "select-pane -t=; send-keys -M" "select-pane -mt="
# Someone also was wondering how to fix here: http://tmux-users.narkive.com/dTFVvLMh/is-it-possible-to-have-a-binding-that-brings-back-mouse-behavior
bind-key    -T root   MouseDrag1Pane   if-shell -F -t = '#{mouse_any_flag}' "if -Ft= '#{pane_in_mode}' 'copy-mode -M' 'send-keys -M' " "copy-mode -M"

bind-key    -T root   MouseDrag1Border resize-pane -M
bind-key    -T root   WheelUpPane     if-shell -F -t = '#{mouse_any_flag}' "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -et=' "
bind-key    -T root   WheelUpStatus    previous-window
bind-key    -T root   WheelDownStatus  next-window

# Custom bindings #
# tmux clipboard becomes just system clipboard
# tmux set-option -g set-clipboard on

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'christoomey/vim-tmux-navigator'
# set -g @plugin 'jimeh/tmux-themepack'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-open'

# Tmux Battery
# set -g status-right '#{battery_status_bg} Batt: #{battery_icon} #{battery_percentage} #{battery_remain} | %a %h-%d %H:%M '

# Tmux Open
set -g @open-S 'https://www.google.com/search?q='

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'

bind-key M-r unbind-key -a\; source-file ~/.tmux.conf

bind-key b if-shell 'test #{has-session -t dump}' '' 'new -d -s dump'\; move-pane -t dump:0
bind-key v join-pane -hs dump:0
bind-key h join-pane -vs dump:0

# bind-key v command-prompt -p "vertical join pane" "join-pane -vs 'dump:%%'"
# bind-key h command-prompt -p "horizontal join pane" "join-pane -hs 'dump:%%'"

set -s user-keys[0] "[15~"
set-option -g prefix User0
unbind-key C-b 
bind User0 send-prefix

# changes the color of the status line
# set-option -g status-style bg=blue

# tmux theme
# set -g @themepack "${HOME}/.dotfiles/.tmux/kev"
source-file "${HOME}/.dotfiles/.tmux/kev.tmuxtheme"
# set -g status-fg colour001

# Setting other options, s/a default cmd or locking after 30 minutes of inactivity
# set-option -g default-command "exec <insert cmd>"
set-option -g lock-after-time 1800

# Creating new key bindings:
# bind-key b set-option status
# bind-key / command-prompt "split-window 'exec man %%'"
# bind-key S command-prompt "new-window -n %1 'ssh %1'"

# allows tmux-resurrect to resurrect vim sessions
set -g @resurrect-strategy-vim 'session'
# # for neovim
# set -g @resurrect-strategy-nvim 'session'

# tmux continuous save. works in parallel w/ tmux-resurrect
set -g @continuum-restore 'on'

# in .tmux.conf
set -g status-right '#{battery_graph} #{battery_status_fg} Batt: #{battery_icon} #{battery_percentage} #{battery_remain} | %a %h-%d %H:%M '

# setting base-index for tmux needs setting page-base-index on tmuxinator
# set-window-option -g base-index 1
# set-window-option -g pane-base-index 1

# Don't need this if using tmux plugin manager
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

set -s user-keys[10] "H"
set -s user-keys[11] "J"
set -s user-keys[12] "K"
set -s user-keys[13] "L"
set -s user-keys[14] "N"

# Ctrl+mode_switch+h/j/k/l
set -s user-keys[15] "[1;5D"
set -s user-keys[16] "[1;5B"
set -s user-keys[17] "[1;5A"
set -s user-keys[18] "[1;5C"

bind-key -r -T prefix User17             resize-pane -U 5
bind-key -r -T prefix User16           resize-pane -D 5
bind-key -r -T prefix User15           resize-pane -L 5
bind-key -r -T prefix User18          resize-pane -R 5

bind-key -n User10 if-shell "$is_vim" "send-keys " "select-pane -L"
bind-key -n User11 if-shell "$is_vim" "send-keys J"  "select-pane -D"
bind-key -n User12 if-shell "$is_vim" "send-keys K"  "select-pane -U"
bind-key -n User13 if-shell "$is_vim" "send-keys L"  "select-pane -R"
bind-key -n User14 if-shell "$is_vim" "send-keys N" "select-pane -l"
bind-key -T copy-mode-vi User10 select-pane -L
bind-key -T copy-mode-vi User11 select-pane -D
bind-key -T copy-mode-vi User12 select-pane -U
bind-key -T copy-mode-vi User13 select-pane -R
bind-key -T copy-mode-vi User14 select-pane -l

# bind-key -n M-H if-shell "$is_vim" "send-keys " "select-pane -L"
# bind-key -n M-J if-shell "$is_vim" "send-keys J"  "select-pane -D"
# bind-key -n M-K if-shell "$is_vim" "send-keys K"  "select-pane -U"
# bind-key -n M-L if-shell "$is_vim" "send-keys L"  "select-pane -R"
# bind-key -n M-N if-shell "$is_vim" "send-keys N" "select-pane -l"
# bind-key -T copy-mode-vi M-H select-pane -L
# bind-key -T copy-mode-vi M-J select-pane -D
# bind-key -T copy-mode-vi M-K select-pane -U
# bind-key -T copy-mode-vi M-L select-pane -R
# bind-key -T copy-mode-vi M-N select-pane -l

# switch_mode+alt+h/j/k/l
set -s user-keys[1] "[1;3D"
# set -s user-keys[2] "[1;3B"
# set -s user-keys[3] "[1;3A"
set -s user-keys[2] "[5~"
set -s user-keys[3] "[6~"
set -s user-keys[4] "[1;3C"

# switch_mode+shift+h/j/k/l
set -s user-keys[5] "[1;2D"
set -s user-keys[6] "[1;2B"
set -s user-keys[7] "[1;2A"
set -s user-keys[8] "[1;2C"

# swtich_mode+mod+0
set -s user-keys[9] "[1;3H"

# switch_mode+shift+j
bind-key -n User6 swap-window -t -1

# switch_mode+shift+k
bind-key -n User7 swap-window -t +1

# switch_mode+alt+j
bind-key -n User2 previous-window

# switch_mode+alt+k
bind-key -n User3 next-window

# use vim movements for scroll
setw -g mode-keys vi
bind -Tcopy-mode-vi v send -X begin-selection

# pane movement
# https://unix.stackexchange.com/questions/14300/moving-tmux-pane-to-window
bind-key j command-prompt -p "join pane from:"  "join-pane -s '%%'"
bind-key s command-prompt -p "send pane to:"  "join-pane -t '%%'"

# tmux theme
# set -g @themepack 'powerline/double/orange'

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# run '~/.tmux/plugins/tpm/tpm'
bind-key -T copy-mode-vi C-\ select-pane -l

# allows mouse 
set-option -g mouse on

# scrollback buffer increase size
set -g history-limit 10000

# synch panes
bind-key a set-window-option synchronize-panes

# https://stackoverflow.com/questions/25684945/pasting-in-vim-on-tmux-returns-this-error-e353-nothing-in-register/40154047
# To fix pasting issue
# set -g default-command 'reattach-to-user-namespace $SHELL --login'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'

# need C-L to autoclear, it was getting overwritten by plugins
unbind-key -n C-L
unbind-key -n C-H
unbind-key -n C-J
unbind-key -n C-K
unbind-key -T copy-mode Y

# allows for line yanking in tmux copy mode
bind -Tcopy-mode-vi Y send -X select-line \; send-keys -X cursor-left\; send-keys -X copy-pipe-and-cancel "xclip -selection clipboard" 
# run-shell ~/clone/path/continuum.tmux
